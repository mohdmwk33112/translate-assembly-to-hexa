#include<iostream>
#include<fstream>
#include<string>
using namespace std;
class CInput {
public:
	int line = 0;
	string lable;
	string instruction;
	string address;
	string dori;
	string comment;
	CInput* pnext;
	CInput* pback;
};
CInput* init() {
	CInput* pnn = new CInput[1];
	pnn->pnext = NULL;
	pnn->pback = NULL;
	return pnn;
}
class CProgram {
public:
	CInput* FirstLine;
	CInput* HaltLine;
	CInput* LastLine;
	CProgram() {
		FirstLine = NULL;
		HaltLine = NULL;
		LastLine = NULL;
	}
	~CProgram() {
		CInput* ptrav = FirstLine;
		while (ptrav != NULL) {
			FirstLine = FirstLine->pnext;
			ptrav->pnext = NULL;
			ptrav->pback = NULL;
			delete ptrav;
			ptrav = FirstLine;
		}
	}
	void addline(CInput* pnn)
	{
		if (FirstLine == NULL) {
			FirstLine = HaltLine = LastLine = pnn;
		}
		else {
			LastLine->pnext = pnn;
			LastLine = pnn;
			if (pnn->instruction == "HLT") {
				HaltLine = pnn;
			}
		}
	}
	void display() {
		CInput* ptrav = FirstLine->pnext;
		int ct = 0;
		while (ptrav != NULL) {
			if (ptrav == HaltLine->pnext || ct == 1)
			{
				ct = 1;
				cout << ptrav->line << "    " << ptrav->instruction << ptrav->address << endl;
			}
			else {
				if (ptrav != HaltLine)
				{
					cout << ptrav->line << "    " << ptrav->lable << ptrav->instruction << ptrav->dori << endl;
				}
				else
				{
					cout << ptrav->line << "    " << ptrav->lable << "7001" << ptrav->dori << endl;
				}
			}
			ptrav = ptrav->pnext;
		}
	}
};
class InstructionSet {
public:
	string x[25][3];
	InstructionSet() {
		//AND
		x[0][0] = "AND";
		x[0][1] = "0";
		x[0][2] = "8";
		//ADD
		x[1][0] = "ADD";
		x[1][1] = "1";
		x[1][2] = "9";
		//LDA
		x[2][0] = "LDA";
		x[2][1] = "2";
		x[2][2] = "A";
		//STA
		x[3][0] = "STA";
		x[3][1] = "3";
		x[3][2] = "B";
		//BUN
		x[4][0] = "BUN";
		x[4][1] = "4";
		x[4][2] = "C";
		//BSA
		x[5][0] = "BSA";
		x[5][1] = "5";
		x[5][2] = "D";
		//ISZ
		x[6][0] = "ISZ";
		x[6][1] = "6";
		x[6][2] = "E";
		//CLA
		x[7][0] = "CLA";
		x[7][1] = "7800";
		x[7][2] = "\0";
		//CLE
		x[8][0] = "CLE";
		x[8][1] = "7400";
		x[8][2] = "\0";
		//CMA
		x[9][0] = "CMA";
		x[9][1] = "7200";
		x[9][2] = "\0";
		//CME
		x[10][0] = "CME";
		x[10][1] = "7100";
		x[10][2] = "\0";
		//CIR
		x[11][0] = "CIR";
		x[11][1] = "7080";
		x[11][2] = "\0";
		//CIL
		x[12][0] = "CIL";
		x[12][1] = "7070";
		x[12][2] = "\0";
		//INC
		x[13][0] = "INC";
		x[13][1] = "7020";
		x[13][2] = "\0";
		//SPA
		x[14][0] = "SPA";
		x[14][1] = "7010";
		x[14][2] = "\0";
		//SNA
		x[15][0] = "SNA";
		x[15][1] = "7008";
		x[15][2] = "\0";
		//SZA
		x[16][0] = "SZA";
		x[16][1] = "7004";
		x[16][2] = "\0";
		//SZE
		x[17][0] = "SZE";
		x[17][1] = "7002";
		x[17][2] = "\0";
		//HLT
		x[18][0] = "HLT";
		x[18][1] = "7001";
		x[18][2] = "\0";
		//INP
		x[19][0] = "INP";
		x[19][1] = "F800";
		x[19][2] = "\0";
		//OUT
		x[20][0] = "OUT";
		x[20][1] = "F400";
		x[20][2] = "\0";
		//SKI
		x[21][0] = "SKI";
		x[21][1] = "F200";
		x[21][2] = "\0";
		//SKO
		x[22][0] = "SKO";
		x[22][1] = "F100";
		x[22][2] = "\0";
		//ION
		x[23][0] = "ION";
		x[23][1] = "F080";
		x[23][2] = "\0";
		//IOF
		x[24][0] = "IOF";
		x[24][1] = "F040";
		x[24][2] = "\0";
	}
	void translate_to_hexa(string& lable, string& instruction, string& address, string& dori, int& ctbad) {
		int ct = 1;
		if (address == "I")
		{
			cout << "There is no addressing mode in register/input output instruction please remove the I";
			ctbad = 1;
		}
		for (int r = 0; r < 25; r++) {
			if (x[r][0] == instruction) {
				ct = 0;
				if (dori == "I") {

					instruction = x[r][2];
					dori = "";
				}
				else {
					instruction = x[r][1];
				}
			}
		}
		if (ct == 1)
		{
			cout << "instruction not found please enter the right instruction" << endl;
			ctbad = 1;
		}
	}
	void display() {
		for (int r = 0; r < 25; r++) {
			for (int c = 0; c < 3; c++) {
				cout << x[r][c];
			}
			cout << endl;
		}
	}
};

void fromdectohex(string& dec)
{
	int x = stoi(dec);
	int i, k;
	string z = "", y = "";
	while (x != 0)
	{
		z += std::to_string(x % 2);
		x = x / 2;
	}
	for (i = 0; i < z.length(); i++)
	{

	}
	for (; z.length() % 4 != 0; i++)
	{
		z += "0";
	}

	for (k = 0; k < z.length(); k++)
	{
		y += z[i];
		i--;
	}

}
void main() {
	CProgram program;
	InstructionSet instruction;
	fstream inputfile;
	string x, linecheck;
	int inf = 0, ct = 0, lbl = 0, line = 0, address = 0, lbla = 0;
	int k, i, j, ctbad = 0, ctbads = 0, flag = 0;
	inputfile.open("Assembly in.txt");
	if (inputfile.is_open()) {
		cout << endl;
		while (getline(inputfile, x)) {
			inf = 0;
			lbl = 0;
			address = 0;
			lbla = 0;
			CInput* pnn = init();
			for (i = 0; i < x.length(); i++) {
				if (lbla == 0)
				{
					for (k = 0; k < x.length(); k++)
					{
						if (x[k] == ',')
						{
							lbla = 1;
							break;
						}
					}
				}
				if (x[i] != ' ')
				{
					if (x[i] == '/')
					{
						for (j = i + 1; j < x.length(); j++)
						{
							pnn->comment += x[j];
						}
						i = j;
					}
					else {
						if (lbla == 1 && lbl == 0)
						{
							lbl = 1;
							for (j = i; x[j] != ','; j++)
							{
								pnn->lable += x[j];
							}
							i = j + 1;
							if (pnn->lable.length() > 3)
							{
								cout << "label are more than 3 chars please enter a valid label" << endl;
								ctbad = 1;
							}
							if (ctbad == 1)
							{
								break;
							}
						}
						else {
							if (inf == 0)
							{
								for (j = i; j < x.length(); j++)
								{
									if (x[j] == ' ')
									{
										break;
									}
									pnn->instruction += x[j];
								}
								i = j;
								inf = 1;
							}
							else {
								if (address == 0)
								{
									for (j = i; j < x.length(); j++)
									{
										if (x[j] == ' ')
										{
											break;
										}
										pnn->address += x[j];
									}
									i = j;
									address = 1;
								}
								else {
									pnn->dori = x[i];
								}
							}
						}
					}
				}

			}
			if (ctbad == 1)
			{
				break;
			}
			else {
				program.addline(pnn);
			}
		}
		CInput* pt = program.FirstLine;
		CInput* pl = program.HaltLine;

		if (ctbad != 1)
		{
			line = stoi(program.FirstLine->address);
			CInput* ptrav = program.FirstLine->pnext;
			while (ptrav != NULL) {
				ptrav->line = line;
				line++;
				ptrav = ptrav->pnext;
			}
			CInput* ptravhlt = program.HaltLine->pnext;
			ptrav = program.FirstLine->pnext;
			while (ptrav != program.HaltLine) {
				if (ctbads == 0)
				{
					instruction.translate_to_hexa(ptrav->lable, ptrav->instruction, ptrav->address, ptrav->dori, ctbads);
				}
				if (ctbads == 1)
				{
					break;
				}
				if (ptrav->address != "") {
					if (ptrav->instruction == instruction.x[0][1] || ptrav->instruction == instruction.x[0][2] || ptrav->instruction == instruction.x[1][1] || ptrav->instruction == instruction.x[1][2] || ptrav->instruction == instruction.x[2][1] || ptrav->instruction == instruction.x[2][2] || ptrav->instruction == instruction.x[3][1] || ptrav->instruction == instruction.x[3][2] || ptrav->instruction == instruction.x[4][1] || ptrav->instruction == instruction.x[4][2]) {
						ptravhlt = program.HaltLine->pnext;
						while (ptravhlt != NULL) {

							if (ptravhlt->lable == ptrav->address) {
								flag = 1;
								ptrav->instruction += std::to_string(ptravhlt->line);
								ptrav->address = "";
								break;
							}
							else {
								linecheck = std::to_string(ptravhlt->line);
								if (linecheck == ptrav->address) {
									flag = 1;
									ptrav->instruction += std::to_string(ptravhlt->line);
								}
							}
							ptravhlt = ptravhlt->pnext;
						}
						if (flag == 0)
						{
							cout << "Address not found please enter a declared label and try again" << endl;
							ctbads = 1;
						}
						flag = 0;
					}
				}
				ptrav = ptrav->pnext;
				if (ctbads == 1)
				{
					break;
				}
			}

			if (ctbads == 0)
			{
				program.display();
			}
		}
	}
}
